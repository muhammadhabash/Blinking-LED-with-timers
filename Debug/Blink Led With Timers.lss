
Blink Led With Timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be0  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000746  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000546  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000020a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042a  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000530  00000000  00000000  0000269e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 93 00 	call	0x126	; 0x126 <main>
  74:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_set>:
	if (port >= A && port <= D)
	{
		reg = (uint8_t*)(GPIO_DATA_R - (port - A));
		if ( bit >= 0 && bit <= 7 )
		{
			GPIO_TOGGLE(reg,bit);
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	80 f4       	brcc	.+32     	; 0xa0 <GPIO_set+0x24>
  80:	eb e3       	ldi	r30, 0x3B	; 59
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e8 1b       	sub	r30, r24
  86:	f1 09       	sbc	r31, r1
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	50 f4       	brcc	.+20     	; 0xa0 <GPIO_set+0x24>
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <GPIO_set+0x1a>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	6a 95       	dec	r22
  98:	e2 f7       	brpl	.-8      	; 0x92 <GPIO_set+0x16>
  9a:	90 81       	ld	r25, Z
  9c:	89 2b       	or	r24, r25
  9e:	80 83       	st	Z, r24
  a0:	08 95       	ret

000000a2 <GPIO_dir>:
}

void GPIO_dir(uint8_t port, uint8_t bit, uint8_t mode)
{
	uint8_t* reg;
	if (port >= A && port <= D)
  a2:	8a 30       	cpi	r24, 0x0A	; 10
  a4:	08 f5       	brcc	.+66     	; 0xe8 <GPIO_dir+0x46>
	{
		reg = (uint8_t*)(GPIO_DIR_R - (port -A));
  a6:	2a e3       	ldi	r18, 0x3A	; 58
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	f9 01       	movw	r30, r18
  ac:	e8 1b       	sub	r30, r24
  ae:	f1 09       	sbc	r31, r1
		if ( bit >= 0 && bit <= 7 )
  b0:	68 30       	cpi	r22, 0x08	; 8
  b2:	d0 f4       	brcc	.+52     	; 0xe8 <GPIO_dir+0x46>
		{
			if (OUTPUT == mode)
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <GPIO_dir+0x2c>
			{
				GPIO_SET(reg,bit);	
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <GPIO_dir+0x20>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <GPIO_dir+0x1c>
  c6:	90 81       	ld	r25, Z
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
			}
			else if (INPUT == mode)
  ce:	41 11       	cpse	r20, r1
  d0:	0b c0       	rjmp	.+22     	; 0xe8 <GPIO_dir+0x46>
			{
				GPIO_CLEAR(reg,bit);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GPIO_dir+0x3a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GPIO_dir+0x36>
  e0:	80 95       	com	r24
  e2:	90 81       	ld	r25, Z
  e4:	89 23       	and	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <GPIO_clear>:
}

void GPIO_clear(uint8_t port, uint8_t bit)
{
	uint8_t* reg;
	if (port >= A && port <= D)
  ea:	8a 30       	cpi	r24, 0x0A	; 10
  ec:	88 f4       	brcc	.+34     	; 0x110 <GPIO_clear+0x26>
	{
		reg = (uint8_t*)(GPIO_DATA_R - (port - A));
  ee:	eb e3       	ldi	r30, 0x3B	; 59
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	e8 1b       	sub	r30, r24
  f4:	f1 09       	sbc	r31, r1
		if ( bit >= 0 && bit <= 7 )
  f6:	68 30       	cpi	r22, 0x08	; 8
  f8:	58 f4       	brcc	.+22     	; 0x110 <GPIO_clear+0x26>
		{
			GPIO_CLEAR(reg, bit);
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_clear+0x1a>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_clear+0x16>
 108:	80 95       	com	r24
 10a:	90 81       	ld	r25, Z
 10c:	89 23       	and	r24, r25
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <LED_en>:
#include "LED.h"

void LED_en(uint8_t port, uint8_t bit)
{
	GPIO_dir(port,bit,OUTPUT);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <GPIO_dir>
 118:	08 95       	ret

0000011a <LED_on>:
}

void LED_on(uint8_t port, uint8_t bit)
{
	GPIO_set(port,bit);
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_set>
 11e:	08 95       	ret

00000120 <LED_off>:
}

void LED_off(uint8_t port, uint8_t bit)
{
	GPIO_clear(port,bit);
 120:	0e 94 75 00 	call	0xea	; 0xea <GPIO_clear>
 124:	08 95       	ret

00000126 <main>:
#include "LED.h"
#include "Timers.h"

int main(void)
{
	LED_en(B,4);
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 89 00 	call	0x112	; 0x112 <LED_en>
    while (1) 
    {
		LED_on(B,4);
 12e:	64 e0       	ldi	r22, 0x04	; 4
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 8d 00 	call	0x11a	; 0x11a <LED_on>
		TIMER0_msdelay(300);
 136:	8c e2       	ldi	r24, 0x2C	; 44
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 08 01 	call	0x210	; 0x210 <TIMER0_msdelay>
		LED_off(B,4);
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 90 00 	call	0x120	; 0x120 <LED_off>
		TIMER0_msdelay(500);
 146:	84 ef       	ldi	r24, 0xF4	; 244
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 08 01 	call	0x210	; 0x210 <TIMER0_msdelay>
 14e:	ef cf       	rjmp	.-34     	; 0x12e <main+0x8>

00000150 <__vector_11>:
}

void OCI2_init(void)
{
	BIT_SET(TIMSK_R,7);
	BIT_SET(STATUS_R,7);
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 166:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16a:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 16e:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	a1 1d       	adc	r26, r1
 176:	b1 1d       	adc	r27, r1
 178:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 184:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <OVI0_init>:
 19a:	89 b7       	in	r24, 0x39	; 57
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	89 bf       	out	0x39, r24	; 57
 1a0:	8f b7       	in	r24, 0x3f	; 63
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8f bf       	out	0x3f, r24	; 63
 1a6:	08 95       	ret

000001a8 <TIMER0_start>:
	counts = 0; 
}

void TIMER0_start(uint16_t u16_prescale)
{
	if (1 == u16_prescale)
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	91 05       	cpc	r25, r1
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <TIMER0_start+0xe>
	{
		TIMER0_CTL_R |= (1<<CS00);
 1ae:	83 b7       	in	r24, 0x33	; 51
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	83 bf       	out	0x33, r24	; 51
 1b4:	08 95       	ret
	}
	else if (8 == u16_prescale)
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	91 05       	cpc	r25, r1
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <TIMER0_start+0x1c>
	{
		TIMER0_CTL_R |= (1<<CS01);	
 1bc:	83 b7       	in	r24, 0x33	; 51
 1be:	82 60       	ori	r24, 0x02	; 2
 1c0:	83 bf       	out	0x33, r24	; 51
 1c2:	08 95       	ret
	}
	else if (32 == u16_prescale)
 1c4:	80 32       	cpi	r24, 0x20	; 32
 1c6:	91 05       	cpc	r25, r1
 1c8:	21 f4       	brne	.+8      	; 0x1d2 <TIMER0_start+0x2a>
	{
		TIMER0_CTL_R |= (1<<CS01) | (1<<CS00);
 1ca:	83 b7       	in	r24, 0x33	; 51
 1cc:	83 60       	ori	r24, 0x03	; 3
 1ce:	83 bf       	out	0x33, r24	; 51
 1d0:	08 95       	ret
	}
	else if (64 == u16_prescale)
 1d2:	80 34       	cpi	r24, 0x40	; 64
 1d4:	91 05       	cpc	r25, r1
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <TIMER0_start+0x38>
	{
		TIMER0_CTL_R |= (1<<CS02);
 1d8:	83 b7       	in	r24, 0x33	; 51
 1da:	84 60       	ori	r24, 0x04	; 4
 1dc:	83 bf       	out	0x33, r24	; 51
 1de:	08 95       	ret
	}
	else if (128 == u16_prescale)
 1e0:	80 38       	cpi	r24, 0x80	; 128
 1e2:	91 05       	cpc	r25, r1
 1e4:	21 f4       	brne	.+8      	; 0x1ee <TIMER0_start+0x46>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS00);
 1e6:	83 b7       	in	r24, 0x33	; 51
 1e8:	85 60       	ori	r24, 0x05	; 5
 1ea:	83 bf       	out	0x33, r24	; 51
 1ec:	08 95       	ret
	}
	else if (256 == u16_prescale)
 1ee:	81 15       	cp	r24, r1
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	92 07       	cpc	r25, r18
 1f4:	21 f4       	brne	.+8      	; 0x1fe <TIMER0_start+0x56>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS01);
 1f6:	83 b7       	in	r24, 0x33	; 51
 1f8:	86 60       	ori	r24, 0x06	; 6
 1fa:	83 bf       	out	0x33, r24	; 51
 1fc:	08 95       	ret
	}
	else if (1024 == u16_prescale)
 1fe:	81 15       	cp	r24, r1
 200:	94 40       	sbci	r25, 0x04	; 4
 202:	19 f4       	brne	.+6      	; 0x20a <TIMER0_start+0x62>
	{
		TIMER0_CTL_R |= (1<<CS02) | (1<<CS01) | (1<<CS00);
 204:	83 b7       	in	r24, 0x33	; 51
 206:	87 60       	ori	r24, 0x07	; 7
 208:	83 bf       	out	0x33, r24	; 51
 20a:	08 95       	ret

0000020c <TIMER0_stop>:
	}
}

void TIMER0_stop(void)
{
	TIMER0_CTL_R = 0;
 20c:	13 be       	out	0x33, r1	; 51
 20e:	08 95       	ret

00000210 <TIMER0_msdelay>:
	BIT_SET(TIMSK_R,7);
	BIT_SET(STATUS_R,7);
}

void TIMER0_msdelay(uint16_t mseconds)
{	
 210:	cf 92       	push	r12
 212:	df 92       	push	r13
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	00 d0       	rcall	.+0      	; 0x21e <TIMER0_msdelay+0xe>
 21e:	00 d0       	rcall	.+0      	; 0x220 <TIMER0_msdelay+0x10>
 220:	00 d0       	rcall	.+0      	; 0x222 <TIMER0_msdelay+0x12>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;
	volatile uint16_t remainder;
	ticks     = ( ( mseconds / 0.001 ) / 255 );
 226:	bc 01       	movw	r22, r24
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 80 02 	call	0x500	; 0x500 <__floatunsisf>
 230:	2f e6       	ldi	r18, 0x6F	; 111
 232:	32 e1       	ldi	r19, 0x12	; 18
 234:	43 e8       	ldi	r20, 0x83	; 131
 236:	5a e3       	ldi	r21, 0x3A	; 58
 238:	0e 94 df 01 	call	0x3be	; 0x3be <__divsf3>
 23c:	6b 01       	movw	r12, r22
 23e:	7c 01       	movw	r14, r24
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	4f e7       	ldi	r20, 0x7F	; 127
 246:	53 e4       	ldi	r21, 0x43	; 67
 248:	0e 94 df 01 	call	0x3be	; 0x3be <__divsf3>
 24c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
 250:	69 83       	std	Y+1, r22	; 0x01
 252:	7a 83       	std	Y+2, r23	; 0x02
 254:	8b 83       	std	Y+3, r24	; 0x03
 256:	9c 83       	std	Y+4, r25	; 0x04
	remainder = ((mseconds / 0.001) - ( ticks * 255 ));  //Calculating the remaining fraction of clock cycles
 258:	29 81       	ldd	r18, Y+1	; 0x01
 25a:	3a 81       	ldd	r19, Y+2	; 0x02
 25c:	4b 81       	ldd	r20, Y+3	; 0x03
 25e:	5c 81       	ldd	r21, Y+4	; 0x04
 260:	af ef       	ldi	r26, 0xFF	; 255
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	0e 94 0e 03 	call	0x61c	; 0x61c <__muluhisi3>
 268:	0e 94 80 02 	call	0x500	; 0x500 <__floatunsisf>
 26c:	9b 01       	movw	r18, r22
 26e:	ac 01       	movw	r20, r24
 270:	c7 01       	movw	r24, r14
 272:	b6 01       	movw	r22, r12
 274:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__subsf3>
 278:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fixunssfsi>
 27c:	7e 83       	std	Y+6, r23	; 0x06
 27e:	6d 83       	std	Y+5, r22	; 0x05
	OVI0_init(); // Enabling system interrupt and flag for overflow int timer 0
 280:	0e 94 cd 00 	call	0x19a	; 0x19a <OVI0_init>
	TIMER0_start(8); // prescaler of one that yields 8MHz frequency
 284:	88 e0       	ldi	r24, 0x08	; 8
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <TIMER0_start>
	while (counts < ticks)
 28c:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 290:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 294:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 298:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	ab 81       	ldd	r26, Y+3	; 0x03
 2a2:	bc 81       	ldd	r27, Y+4	; 0x04
 2a4:	48 17       	cp	r20, r24
 2a6:	59 07       	cpc	r21, r25
 2a8:	6a 07       	cpc	r22, r26
 2aa:	7b 07       	cpc	r23, r27
 2ac:	78 f3       	brcs	.-34     	; 0x28c <TIMER0_msdelay+0x7c>
	{
		//Stay here till reaching the overflow counts that corresponds to the required delay
	}
	TIMER0_CNT_R = (255-remainder); //Compensation of ticks remaining fraction to increase accuracy
 2ae:	8d 81       	ldd	r24, Y+5	; 0x05
 2b0:	9e 81       	ldd	r25, Y+6	; 0x06
 2b2:	80 95       	com	r24
 2b4:	82 bf       	out	0x32, r24	; 50
	TIMER0_stop();
 2b6:	0e 94 06 01 	call	0x20c	; 0x20c <TIMER0_stop>
	counts = 0; 
 2ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 2be:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 2c2:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 2c6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
}
 2ca:	26 96       	adiw	r28, 0x06	; 6
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	08 95       	ret

000002e4 <__subsf3>:
 2e4:	50 58       	subi	r21, 0x80	; 128

000002e6 <__addsf3>:
 2e6:	bb 27       	eor	r27, r27
 2e8:	aa 27       	eor	r26, r26
 2ea:	0e 94 8a 01 	call	0x314	; 0x314 <__addsf3x>
 2ee:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 2f2:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 2f6:	38 f0       	brcs	.+14     	; 0x306 <__addsf3+0x20>
 2f8:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 2fc:	20 f0       	brcs	.+8      	; 0x306 <__addsf3+0x20>
 2fe:	39 f4       	brne	.+14     	; 0x30e <__addsf3+0x28>
 300:	9f 3f       	cpi	r25, 0xFF	; 255
 302:	19 f4       	brne	.+6      	; 0x30a <__addsf3+0x24>
 304:	26 f4       	brtc	.+8      	; 0x30e <__addsf3+0x28>
 306:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>
 30a:	0e f4       	brtc	.+2      	; 0x30e <__addsf3+0x28>
 30c:	e0 95       	com	r30
 30e:	e7 fb       	bst	r30, 7
 310:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>

00000314 <__addsf3x>:
 314:	e9 2f       	mov	r30, r25
 316:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 31a:	58 f3       	brcs	.-42     	; 0x2f2 <__addsf3+0xc>
 31c:	ba 17       	cp	r27, r26
 31e:	62 07       	cpc	r22, r18
 320:	73 07       	cpc	r23, r19
 322:	84 07       	cpc	r24, r20
 324:	95 07       	cpc	r25, r21
 326:	20 f0       	brcs	.+8      	; 0x330 <__addsf3x+0x1c>
 328:	79 f4       	brne	.+30     	; 0x348 <__addsf3x+0x34>
 32a:	a6 f5       	brtc	.+104    	; 0x394 <__addsf3x+0x80>
 32c:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 330:	0e f4       	brtc	.+2      	; 0x334 <__addsf3x+0x20>
 332:	e0 95       	com	r30
 334:	0b 2e       	mov	r0, r27
 336:	ba 2f       	mov	r27, r26
 338:	a0 2d       	mov	r26, r0
 33a:	0b 01       	movw	r0, r22
 33c:	b9 01       	movw	r22, r18
 33e:	90 01       	movw	r18, r0
 340:	0c 01       	movw	r0, r24
 342:	ca 01       	movw	r24, r20
 344:	a0 01       	movw	r20, r0
 346:	11 24       	eor	r1, r1
 348:	ff 27       	eor	r31, r31
 34a:	59 1b       	sub	r21, r25
 34c:	99 f0       	breq	.+38     	; 0x374 <__addsf3x+0x60>
 34e:	59 3f       	cpi	r21, 0xF9	; 249
 350:	50 f4       	brcc	.+20     	; 0x366 <__addsf3x+0x52>
 352:	50 3e       	cpi	r21, 0xE0	; 224
 354:	68 f1       	brcs	.+90     	; 0x3b0 <__addsf3x+0x9c>
 356:	1a 16       	cp	r1, r26
 358:	f0 40       	sbci	r31, 0x00	; 0
 35a:	a2 2f       	mov	r26, r18
 35c:	23 2f       	mov	r18, r19
 35e:	34 2f       	mov	r19, r20
 360:	44 27       	eor	r20, r20
 362:	58 5f       	subi	r21, 0xF8	; 248
 364:	f3 cf       	rjmp	.-26     	; 0x34c <__addsf3x+0x38>
 366:	46 95       	lsr	r20
 368:	37 95       	ror	r19
 36a:	27 95       	ror	r18
 36c:	a7 95       	ror	r26
 36e:	f0 40       	sbci	r31, 0x00	; 0
 370:	53 95       	inc	r21
 372:	c9 f7       	brne	.-14     	; 0x366 <__addsf3x+0x52>
 374:	7e f4       	brtc	.+30     	; 0x394 <__addsf3x+0x80>
 376:	1f 16       	cp	r1, r31
 378:	ba 0b       	sbc	r27, r26
 37a:	62 0b       	sbc	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	ba f0       	brmi	.+46     	; 0x3b0 <__addsf3x+0x9c>
 382:	91 50       	subi	r25, 0x01	; 1
 384:	a1 f0       	breq	.+40     	; 0x3ae <__addsf3x+0x9a>
 386:	ff 0f       	add	r31, r31
 388:	bb 1f       	adc	r27, r27
 38a:	66 1f       	adc	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	88 1f       	adc	r24, r24
 390:	c2 f7       	brpl	.-16     	; 0x382 <__addsf3x+0x6e>
 392:	0e c0       	rjmp	.+28     	; 0x3b0 <__addsf3x+0x9c>
 394:	ba 0f       	add	r27, r26
 396:	62 1f       	adc	r22, r18
 398:	73 1f       	adc	r23, r19
 39a:	84 1f       	adc	r24, r20
 39c:	48 f4       	brcc	.+18     	; 0x3b0 <__addsf3x+0x9c>
 39e:	87 95       	ror	r24
 3a0:	77 95       	ror	r23
 3a2:	67 95       	ror	r22
 3a4:	b7 95       	ror	r27
 3a6:	f7 95       	ror	r31
 3a8:	9e 3f       	cpi	r25, 0xFE	; 254
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__addsf3x+0x9a>
 3ac:	b0 cf       	rjmp	.-160    	; 0x30e <__addsf3+0x28>
 3ae:	93 95       	inc	r25
 3b0:	88 0f       	add	r24, r24
 3b2:	08 f0       	brcs	.+2      	; 0x3b6 <__addsf3x+0xa2>
 3b4:	99 27       	eor	r25, r25
 3b6:	ee 0f       	add	r30, r30
 3b8:	97 95       	ror	r25
 3ba:	87 95       	ror	r24
 3bc:	08 95       	ret

000003be <__divsf3>:
 3be:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__divsf3x>
 3c2:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__fp_round>
 3c6:	0e 94 cd 02 	call	0x59a	; 0x59a <__fp_pscB>
 3ca:	58 f0       	brcs	.+22     	; 0x3e2 <__divsf3+0x24>
 3cc:	0e 94 c6 02 	call	0x58c	; 0x58c <__fp_pscA>
 3d0:	40 f0       	brcs	.+16     	; 0x3e2 <__divsf3+0x24>
 3d2:	29 f4       	brne	.+10     	; 0x3de <__divsf3+0x20>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	29 f0       	breq	.+10     	; 0x3e2 <__divsf3+0x24>
 3d8:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 3dc:	51 11       	cpse	r21, r1
 3de:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>
 3e2:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_nan>

000003e6 <__divsf3x>:
 3e6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <__fp_split3>
 3ea:	68 f3       	brcs	.-38     	; 0x3c6 <__divsf3+0x8>

000003ec <__divsf3_pse>:
 3ec:	99 23       	and	r25, r25
 3ee:	b1 f3       	breq	.-20     	; 0x3dc <__divsf3+0x1e>
 3f0:	55 23       	and	r21, r21
 3f2:	91 f3       	breq	.-28     	; 0x3d8 <__divsf3+0x1a>
 3f4:	95 1b       	sub	r25, r21
 3f6:	55 0b       	sbc	r21, r21
 3f8:	bb 27       	eor	r27, r27
 3fa:	aa 27       	eor	r26, r26
 3fc:	62 17       	cp	r22, r18
 3fe:	73 07       	cpc	r23, r19
 400:	84 07       	cpc	r24, r20
 402:	38 f0       	brcs	.+14     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 404:	9f 5f       	subi	r25, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
 40c:	44 1f       	adc	r20, r20
 40e:	aa 1f       	adc	r26, r26
 410:	a9 f3       	breq	.-22     	; 0x3fc <__divsf3_pse+0x10>
 412:	35 d0       	rcall	.+106    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 414:	0e 2e       	mov	r0, r30
 416:	3a f0       	brmi	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 418:	e0 e8       	ldi	r30, 0x80	; 128
 41a:	32 d0       	rcall	.+100    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 41c:	91 50       	subi	r25, 0x01	; 1
 41e:	50 40       	sbci	r21, 0x00	; 0
 420:	e6 95       	lsr	r30
 422:	00 1c       	adc	r0, r0
 424:	ca f7       	brpl	.-14     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 426:	2b d0       	rcall	.+86     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 428:	fe 2f       	mov	r31, r30
 42a:	29 d0       	rcall	.+82     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	bb 1f       	adc	r27, r27
 434:	26 17       	cp	r18, r22
 436:	37 07       	cpc	r19, r23
 438:	48 07       	cpc	r20, r24
 43a:	ab 07       	cpc	r26, r27
 43c:	b0 e8       	ldi	r27, 0x80	; 128
 43e:	09 f0       	breq	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	bb 0b       	sbc	r27, r27
 442:	80 2d       	mov	r24, r0
 444:	bf 01       	movw	r22, r30
 446:	ff 27       	eor	r31, r31
 448:	93 58       	subi	r25, 0x83	; 131
 44a:	5f 4f       	sbci	r21, 0xFF	; 255
 44c:	3a f0       	brmi	.+14     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	51 05       	cpc	r21, r1
 452:	78 f0       	brcs	.+30     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 454:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_inf>
 458:	0c 94 08 03 	jmp	0x610	; 0x610 <__fp_szero>
 45c:	5f 3f       	cpi	r21, 0xFF	; 255
 45e:	e4 f3       	brlt	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	98 3e       	cpi	r25, 0xE8	; 232
 462:	d4 f3       	brlt	.-12     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 464:	86 95       	lsr	r24
 466:	77 95       	ror	r23
 468:	67 95       	ror	r22
 46a:	b7 95       	ror	r27
 46c:	f7 95       	ror	r31
 46e:	9f 5f       	subi	r25, 0xFF	; 255
 470:	c9 f7       	brne	.-14     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 472:	88 0f       	add	r24, r24
 474:	91 1d       	adc	r25, r1
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
 47a:	97 f9       	bld	r25, 7
 47c:	08 95       	ret
 47e:	e1 e0       	ldi	r30, 0x01	; 1
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	bb 1f       	adc	r27, r27
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	ba 07       	cpc	r27, r26
 490:	20 f0       	brcs	.+8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 492:	62 1b       	sub	r22, r18
 494:	73 0b       	sbc	r23, r19
 496:	84 0b       	sbc	r24, r20
 498:	ba 0b       	sbc	r27, r26
 49a:	ee 1f       	adc	r30, r30
 49c:	88 f7       	brcc	.-30     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 49e:	e0 95       	com	r30
 4a0:	08 95       	ret

000004a2 <__fixunssfsi>:
 4a2:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_splitA>
 4a6:	88 f0       	brcs	.+34     	; 0x4ca <__fixunssfsi+0x28>
 4a8:	9f 57       	subi	r25, 0x7F	; 127
 4aa:	98 f0       	brcs	.+38     	; 0x4d2 <__fixunssfsi+0x30>
 4ac:	b9 2f       	mov	r27, r25
 4ae:	99 27       	eor	r25, r25
 4b0:	b7 51       	subi	r27, 0x17	; 23
 4b2:	b0 f0       	brcs	.+44     	; 0x4e0 <__fixunssfsi+0x3e>
 4b4:	e1 f0       	breq	.+56     	; 0x4ee <__fixunssfsi+0x4c>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	1a f0       	brmi	.+6      	; 0x4c6 <__fixunssfsi+0x24>
 4c0:	ba 95       	dec	r27
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__fixunssfsi+0x14>
 4c4:	14 c0       	rjmp	.+40     	; 0x4ee <__fixunssfsi+0x4c>
 4c6:	b1 30       	cpi	r27, 0x01	; 1
 4c8:	91 f0       	breq	.+36     	; 0x4ee <__fixunssfsi+0x4c>
 4ca:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_zero>
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	08 95       	ret
 4d2:	0c 94 07 03 	jmp	0x60e	; 0x60e <__fp_zero>
 4d6:	67 2f       	mov	r22, r23
 4d8:	78 2f       	mov	r23, r24
 4da:	88 27       	eor	r24, r24
 4dc:	b8 5f       	subi	r27, 0xF8	; 248
 4de:	39 f0       	breq	.+14     	; 0x4ee <__fixunssfsi+0x4c>
 4e0:	b9 3f       	cpi	r27, 0xF9	; 249
 4e2:	cc f3       	brlt	.-14     	; 0x4d6 <__fixunssfsi+0x34>
 4e4:	86 95       	lsr	r24
 4e6:	77 95       	ror	r23
 4e8:	67 95       	ror	r22
 4ea:	b3 95       	inc	r27
 4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__fixunssfsi+0x42>
 4ee:	3e f4       	brtc	.+14     	; 0x4fe <__fixunssfsi+0x5c>
 4f0:	90 95       	com	r25
 4f2:	80 95       	com	r24
 4f4:	70 95       	com	r23
 4f6:	61 95       	neg	r22
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	8f 4f       	sbci	r24, 0xFF	; 255
 4fc:	9f 4f       	sbci	r25, 0xFF	; 255
 4fe:	08 95       	ret

00000500 <__floatunsisf>:
 500:	e8 94       	clt
 502:	09 c0       	rjmp	.+18     	; 0x516 <__floatsisf+0x12>

00000504 <__floatsisf>:
 504:	97 fb       	bst	r25, 7
 506:	3e f4       	brtc	.+14     	; 0x516 <__floatsisf+0x12>
 508:	90 95       	com	r25
 50a:	80 95       	com	r24
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	99 23       	and	r25, r25
 518:	a9 f0       	breq	.+42     	; 0x544 <__floatsisf+0x40>
 51a:	f9 2f       	mov	r31, r25
 51c:	96 e9       	ldi	r25, 0x96	; 150
 51e:	bb 27       	eor	r27, r27
 520:	93 95       	inc	r25
 522:	f6 95       	lsr	r31
 524:	87 95       	ror	r24
 526:	77 95       	ror	r23
 528:	67 95       	ror	r22
 52a:	b7 95       	ror	r27
 52c:	f1 11       	cpse	r31, r1
 52e:	f8 cf       	rjmp	.-16     	; 0x520 <__floatsisf+0x1c>
 530:	fa f4       	brpl	.+62     	; 0x570 <__floatsisf+0x6c>
 532:	bb 0f       	add	r27, r27
 534:	11 f4       	brne	.+4      	; 0x53a <__floatsisf+0x36>
 536:	60 ff       	sbrs	r22, 0
 538:	1b c0       	rjmp	.+54     	; 0x570 <__floatsisf+0x6c>
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	8f 4f       	sbci	r24, 0xFF	; 255
 540:	9f 4f       	sbci	r25, 0xFF	; 255
 542:	16 c0       	rjmp	.+44     	; 0x570 <__floatsisf+0x6c>
 544:	88 23       	and	r24, r24
 546:	11 f0       	breq	.+4      	; 0x54c <__floatsisf+0x48>
 548:	96 e9       	ldi	r25, 0x96	; 150
 54a:	11 c0       	rjmp	.+34     	; 0x56e <__floatsisf+0x6a>
 54c:	77 23       	and	r23, r23
 54e:	21 f0       	breq	.+8      	; 0x558 <__floatsisf+0x54>
 550:	9e e8       	ldi	r25, 0x8E	; 142
 552:	87 2f       	mov	r24, r23
 554:	76 2f       	mov	r23, r22
 556:	05 c0       	rjmp	.+10     	; 0x562 <__floatsisf+0x5e>
 558:	66 23       	and	r22, r22
 55a:	71 f0       	breq	.+28     	; 0x578 <__floatsisf+0x74>
 55c:	96 e8       	ldi	r25, 0x86	; 134
 55e:	86 2f       	mov	r24, r22
 560:	70 e0       	ldi	r23, 0x00	; 0
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	2a f0       	brmi	.+10     	; 0x570 <__floatsisf+0x6c>
 566:	9a 95       	dec	r25
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	da f7       	brpl	.-10     	; 0x566 <__floatsisf+0x62>
 570:	88 0f       	add	r24, r24
 572:	96 95       	lsr	r25
 574:	87 95       	ror	r24
 576:	97 f9       	bld	r25, 7
 578:	08 95       	ret

0000057a <__fp_inf>:
 57a:	97 f9       	bld	r25, 7
 57c:	9f 67       	ori	r25, 0x7F	; 127
 57e:	80 e8       	ldi	r24, 0x80	; 128
 580:	70 e0       	ldi	r23, 0x00	; 0
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	08 95       	ret

00000586 <__fp_nan>:
 586:	9f ef       	ldi	r25, 0xFF	; 255
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	08 95       	ret

0000058c <__fp_pscA>:
 58c:	00 24       	eor	r0, r0
 58e:	0a 94       	dec	r0
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	09 06       	cpc	r0, r25
 598:	08 95       	ret

0000059a <__fp_pscB>:
 59a:	00 24       	eor	r0, r0
 59c:	0a 94       	dec	r0
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	14 06       	cpc	r1, r20
 5a4:	05 06       	cpc	r0, r21
 5a6:	08 95       	ret

000005a8 <__fp_round>:
 5a8:	09 2e       	mov	r0, r25
 5aa:	03 94       	inc	r0
 5ac:	00 0c       	add	r0, r0
 5ae:	11 f4       	brne	.+4      	; 0x5b4 <__fp_round+0xc>
 5b0:	88 23       	and	r24, r24
 5b2:	52 f0       	brmi	.+20     	; 0x5c8 <__fp_round+0x20>
 5b4:	bb 0f       	add	r27, r27
 5b6:	40 f4       	brcc	.+16     	; 0x5c8 <__fp_round+0x20>
 5b8:	bf 2b       	or	r27, r31
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <__fp_round+0x18>
 5bc:	60 ff       	sbrs	r22, 0
 5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__fp_round+0x20>
 5c0:	6f 5f       	subi	r22, 0xFF	; 255
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	8f 4f       	sbci	r24, 0xFF	; 255
 5c6:	9f 4f       	sbci	r25, 0xFF	; 255
 5c8:	08 95       	ret

000005ca <__fp_split3>:
 5ca:	57 fd       	sbrc	r21, 7
 5cc:	90 58       	subi	r25, 0x80	; 128
 5ce:	44 0f       	add	r20, r20
 5d0:	55 1f       	adc	r21, r21
 5d2:	59 f0       	breq	.+22     	; 0x5ea <__fp_splitA+0x10>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__fp_splitA+0x1a>
 5d8:	47 95       	ror	r20

000005da <__fp_splitA>:
 5da:	88 0f       	add	r24, r24
 5dc:	97 fb       	bst	r25, 7
 5de:	99 1f       	adc	r25, r25
 5e0:	61 f0       	breq	.+24     	; 0x5fa <__fp_splitA+0x20>
 5e2:	9f 3f       	cpi	r25, 0xFF	; 255
 5e4:	79 f0       	breq	.+30     	; 0x604 <__fp_splitA+0x2a>
 5e6:	87 95       	ror	r24
 5e8:	08 95       	ret
 5ea:	12 16       	cp	r1, r18
 5ec:	13 06       	cpc	r1, r19
 5ee:	14 06       	cpc	r1, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	f2 cf       	rjmp	.-28     	; 0x5d8 <__fp_split3+0xe>
 5f4:	46 95       	lsr	r20
 5f6:	f1 df       	rcall	.-30     	; 0x5da <__fp_splitA>
 5f8:	08 c0       	rjmp	.+16     	; 0x60a <__fp_splitA+0x30>
 5fa:	16 16       	cp	r1, r22
 5fc:	17 06       	cpc	r1, r23
 5fe:	18 06       	cpc	r1, r24
 600:	99 1f       	adc	r25, r25
 602:	f1 cf       	rjmp	.-30     	; 0x5e6 <__fp_splitA+0xc>
 604:	86 95       	lsr	r24
 606:	71 05       	cpc	r23, r1
 608:	61 05       	cpc	r22, r1
 60a:	08 94       	sec
 60c:	08 95       	ret

0000060e <__fp_zero>:
 60e:	e8 94       	clt

00000610 <__fp_szero>:
 610:	bb 27       	eor	r27, r27
 612:	66 27       	eor	r22, r22
 614:	77 27       	eor	r23, r23
 616:	cb 01       	movw	r24, r22
 618:	97 f9       	bld	r25, 7
 61a:	08 95       	ret

0000061c <__muluhisi3>:
 61c:	0e 94 19 03 	call	0x632	; 0x632 <__umulhisi3>
 620:	a5 9f       	mul	r26, r21
 622:	90 0d       	add	r25, r0
 624:	b4 9f       	mul	r27, r20
 626:	90 0d       	add	r25, r0
 628:	a4 9f       	mul	r26, r20
 62a:	80 0d       	add	r24, r0
 62c:	91 1d       	adc	r25, r1
 62e:	11 24       	eor	r1, r1
 630:	08 95       	ret

00000632 <__umulhisi3>:
 632:	a2 9f       	mul	r26, r18
 634:	b0 01       	movw	r22, r0
 636:	b3 9f       	mul	r27, r19
 638:	c0 01       	movw	r24, r0
 63a:	a3 9f       	mul	r26, r19
 63c:	70 0d       	add	r23, r0
 63e:	81 1d       	adc	r24, r1
 640:	11 24       	eor	r1, r1
 642:	91 1d       	adc	r25, r1
 644:	b2 9f       	mul	r27, r18
 646:	70 0d       	add	r23, r0
 648:	81 1d       	adc	r24, r1
 64a:	11 24       	eor	r1, r1
 64c:	91 1d       	adc	r25, r1
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
